(()=>{"use strict";var e={904:(e,n,t)=>{t.d(n,{c:()=>c});var r=t(648),i=t.n(r),o=t(312),a=t.n(o)()(i());a.push([e.id,"body {\n  background-color: gray;\n}\n\n.header, .city-overview, .city-info, .city-info > div {\n  display: flex;\n  align-items: center;\n}\n\n.city-overview, .header, .city-info > div {\n  flex-direction: column;\n}\n\n.city-overview, .city-info > div {\n  text-align: center;\n}\n\n.city-overview > img {\n  max-width: 300px;\n  height: auto;\n}\n\n.city-info {\n  gap: 1rem;\n  justify-content: center;\n  flex-wrap: wrap;\n  padding:1rem;\n}\n\n.city-info > div {\n  background-color: white;\n  padding:8px 16px;\n}\n\n.hidden {\n  visibility: hidden;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,sBAAsB;AACxB;;AAEA;EACE,aAAa;EACb,mBAAmB;AACrB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,gBAAgB;EAChB,YAAY;AACd;;AAEA;EACE,SAAS;EACT,uBAAuB;EACvB,eAAe;EACf,YAAY;AACd;;AAEA;EACE,uBAAuB;EACvB,gBAAgB;AAClB;;AAEA;EACE,kBAAkB;AACpB",sourcesContent:["body {\n  background-color: gray;\n}\n\n.header, .city-overview, .city-info, .city-info > div {\n  display: flex;\n  align-items: center;\n}\n\n.city-overview, .header, .city-info > div {\n  flex-direction: column;\n}\n\n.city-overview, .city-info > div {\n  text-align: center;\n}\n\n.city-overview > img {\n  max-width: 300px;\n  height: auto;\n}\n\n.city-info {\n  gap: 1rem;\n  justify-content: center;\n  flex-wrap: wrap;\n  padding:1rem;\n}\n\n.city-info > div {\n  background-color: white;\n  padding:8px 16px;\n}\n\n.hidden {\n  visibility: hidden;\n}"],sourceRoot:""}]);const c=a},312:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,i,o){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(a[s]=!0)}for(var u=0;u<e.length;u++){var d=[].concat(e[u]);r&&a[d[0]]||(void 0!==o&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=o),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),i&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=i):d[4]="".concat(i)),n.push(d))}},n}},648:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(i," */");return[n].concat([o]).join("\n")}return[n].join("\n")}},596:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var o={},a=[],c=0;c<e.length;c++){var s=e[c],u=r.base?s[0]+r.base:s[0],d=o[u]||0,p="".concat(u," ").concat(d);o[u]=d+1;var l=t(p),m={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==l)n[l].references++,n[l].updater(m);else{var h=i(m,r);r.byIndex=c,n.splice(c,0,{identifier:p,updater:h,references:1})}a.push(p)}return a}function i(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,i){var o=r(e=e||[],i=i||{});return function(e){e=e||[];for(var a=0;a<o.length;a++){var c=t(o[a]);n[c].references--}for(var s=r(e,i),u=0;u<o.length;u++){var d=t(o[u]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}o=s}}},795:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},808:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},120:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},520:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var i=void 0!==t.layer;i&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,i&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},936:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var i=n[r];if(void 0!==i)return i.exports;var o=n[r]={id:r,exports:{}};return e[r](o,o.exports,t),o.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0,(()=>{var e=t(596),n=t.n(e),r=t(520),i=t.n(r),o=t(795),a=t.n(o),c=t(120),s=t.n(c),u=t(808),d=t.n(u),p=t(936),l=t.n(p),m=t(904),h={};h.styleTagTransform=l(),h.setAttributes=s(),h.insert=a().bind(null,"head"),h.domAPI=i(),h.insertStyleElement=d(),n()(m.c,h),m.c&&m.c.locals&&m.c.locals;const f=function(){document.querySelector("p").classList.toggle("hidden")},v=async function(e){const n=document.querySelector(".city-overview"),t=document.createElement("h1"),r=document.createElement("h2"),i=document.createElement("img"),o=document.querySelector(".temperature-container"),a=document.createElement("h2");a.textContent="Temperature:";const c=document.createElement("p"),s=document.querySelector(".wind-container"),u=document.createElement("h2");u.textContent="Wind:";const d=document.createElement("p"),p=document.querySelector(".pressure-container"),l=document.createElement("h2");l.textContent="Pressure:";const m=document.createElement("p"),h=document.querySelector(".precipitation-container"),f=document.createElement("h2");f.textContent="Precipitation:";const v=document.createElement("p"),y=document.querySelector(".humidity-container"),A=document.createElement("h2");A.textContent="Humidity:";const C=document.createElement("p");e?(t.textContent=e.location,r.textContent=`Weather: ${e.weatherCondition}`,i.src=await async function(e){try{const n=await fetch(`https://api.giphy.com/v1/gifs/translate?api_key=TMLGCcktpoN1YIIaY1ZA4UuSsu9Vtxz1&s=${e}`,{mode:"cors"}),t=await n.json();return 0!==t.data.length?t.data.images.original.url:""}catch(e){return""}}(e.weatherCondition)||"",c.textContent=`${e.temperature_in_celsius}Â°C`,d.textContent=`${e.wind_in_kph} km/h`,m.textContent=`${e.pressure_in_inches} inches`,v.textContent=`${e.precipitation_in_milimeters} mm`,C.textContent=`${e.humidity}%`):(t.textContent="City hasn't been selected yet",r.textContent="Weather: Unavailable",i.src="",c.textContent="Unavailable",d.textContent="Unavailable",m.textContent="Unavailable",v.textContent="Unavailable",C.textContent="Unavailable"),n.innerHTML="",o.innerHTML="",s.innerHTML="",p.innerHTML="",h.innerHTML="",y.innerHTML="",n.appendChild(t),n.appendChild(r),n.appendChild(i),o.appendChild(a),o.appendChild(c),s.appendChild(u),s.appendChild(d),p.appendChild(l),p.appendChild(m),h.appendChild(f),h.appendChild(v),y.appendChild(A),y.appendChild(C)},y=function(e,n,t,r,i,o,a){this.location=e,this.weatherCondition=n,this.temperature_in_celsius=t,this.wind_in_kph=r,this.pressure_in_inches=i,this.precipitation_in_milimeters=o,this.humidity=a},A=async function(e){try{const n=await fetch(`http://api.weatherapi.com/v1/current.json?key=e4bee7983eb6408dac3144025242701&q=${e}&aqi=no`),t=await n.json();f(),v(new y(`${t.location.name}, ${t.location.region}, ${t.location.country}`,t.current.condition.text,t.current.temp_c,t.current.wind_kph,t.current.pressure_in,t.current.precip_mm,t.current.humidity))}catch(e){throw await v(),new Error(e)}},C=async function(e){const n=document.querySelector("#search-options"),t=await async function(e){try{const n=await fetch(`http://api.weatherapi.com/v1/search.json?key=e4bee7983eb6408dac3144025242701&q=${e}`);return await n.json()}catch(e){throw new Error(e)}}(e);n.innerHTML="",t.forEach((e=>{const t=document.createElement("option");t.name=`${e.name}, ${e.region}, ${e.country}`,t.value=`${e.name}, ${e.region}, ${e.country}`,n.appendChild(t)}))};A("");const g=document.querySelector("input");g.addEventListener("keydown",(e=>{"Enter"===e.code?(f(),A(g.value)):""!==g.value&&C(g.value)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,